{"ast":null,"code":"import { useState, useEffect, useMemo } from \"react\";\nimport { useInterval } from \"./use-interval\";\nexport const useTimer = options => {\n  const {\n    steps\n  } = options; // Initialize timer:\n\n  const totalTime = useMemo(() => steps.reduce((total, step) => total + step.duration * 1000, 0), [steps.length]);\n  const {\n    0: elapsed,\n    1: setElapsed\n  } = useState(0);\n  const {\n    0: isComplete,\n    1: setIsComplete\n  } = useState(false);\n  const {\n    0: isRunning,\n    1: setIsRunning\n  } = useState(false);\n  const {\n    0: remaining,\n    1: setRemaining\n  } = useState(totalTime); // Run the timer:\n\n  const tick = () => setElapsed(elapsed => elapsed += 100);\n\n  useInterval(tick, isRunning && !isComplete ? 100 : null); // Update the remaining time:\n\n  useEffect(() => {\n    remaining > 0 && setRemaining(totalTime - elapsed);\n  }, [elapsed]); // Determine if the timer is complete:\n\n  useEffect(() => {\n    if (remaining === 0) {\n      setIsComplete(true);\n      setIsRunning(false);\n    }\n  }, [remaining]); // Manipulate the timer:\n\n  const pause = () => setIsRunning(false);\n\n  const reset = () => {\n    setElapsed(0);\n    setIsRunning(false);\n    setIsComplete(false);\n    setRemaining(totalTime);\n  };\n\n  const start = () => setIsRunning(true);\n\n  const toggle = () => setIsRunning(isRunning => !isRunning);\n\n  return {\n    elapsed,\n    isComplete,\n    isRunning,\n    pause,\n    remaining,\n    reset,\n    start,\n    toggle\n  };\n};","map":{"version":3,"sources":["/home/niels/dev/nielsrowinbik/brewtime/hooks/use-timer.ts"],"names":["useState","useEffect","useMemo","useInterval","useTimer","options","steps","totalTime","reduce","total","step","duration","length","elapsed","setElapsed","isComplete","setIsComplete","isRunning","setIsRunning","remaining","setRemaining","tick","pause","reset","start","toggle"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,OAA9B,QAA6C,OAA7C;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAWA,OAAO,MAAMC,QAAQ,GAAIC,OAAD,IAAsB;AAC1C,QAAM;AAAEC,IAAAA;AAAF,MAAYD,OAAlB,CAD0C,CAG1C;;AACA,QAAME,SAAS,GAAGL,OAAO,CACrB,MAAMI,KAAK,CAACE,MAAN,CAAa,CAACC,KAAD,EAAQC,IAAR,KAAiBD,KAAK,GAAGC,IAAI,CAACC,QAAL,GAAgB,IAAtD,EAA4D,CAA5D,CADe,EAErB,CAACL,KAAK,CAACM,MAAP,CAFqB,CAAzB;AAIA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBd,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM;AAAA,OAACe,UAAD;AAAA,OAAaC;AAAb,MAA8BhB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACiB,SAAD;AAAA,OAAYC;AAAZ,MAA4BlB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACmB,SAAD;AAAA,OAAYC;AAAZ,MAA4BpB,QAAQ,CAACO,SAAD,CAA1C,CAX0C,CAa1C;;AACA,QAAMc,IAAI,GAAG,MAAMP,UAAU,CAAED,OAAD,IAAcA,OAAO,IAAI,GAA1B,CAA7B;;AACAV,EAAAA,WAAW,CAACkB,IAAD,EAAOJ,SAAS,IAAI,CAACF,UAAd,GAA2B,GAA3B,GAAiC,IAAxC,CAAX,CAf0C,CAiB1C;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,SAAS,GAAG,CAAZ,IAAiBC,YAAY,CAACb,SAAS,GAAGM,OAAb,CAA7B;AACH,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT,CAlB0C,CAsB1C;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkB,SAAS,KAAK,CAAlB,EAAqB;AACjBH,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GALQ,EAKN,CAACC,SAAD,CALM,CAAT,CAvB0C,CA8B1C;;AACA,QAAMG,KAAK,GAAG,MAAMJ,YAAY,CAAC,KAAD,CAAhC;;AACA,QAAMK,KAAK,GAAG,MAAM;AAChBT,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAI,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,IAAAA,YAAY,CAACb,SAAD,CAAZ;AACH,GALD;;AAMA,QAAMiB,KAAK,GAAG,MAAMN,YAAY,CAAC,IAAD,CAAhC;;AACA,QAAMO,MAAM,GAAG,MAAMP,YAAY,CAAED,SAAD,IAAe,CAACA,SAAjB,CAAjC;;AAEA,SAAO;AACHJ,IAAAA,OADG;AAEHE,IAAAA,UAFG;AAGHE,IAAAA,SAHG;AAIHK,IAAAA,KAJG;AAKHH,IAAAA,SALG;AAMHI,IAAAA,KANG;AAOHC,IAAAA,KAPG;AAQHC,IAAAA;AARG,GAAP;AAUH,CAnDM","sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\n\nimport { useInterval } from \"./use-interval\";\n\ntype Step = {\n    description: string;\n    duration: number;\n};\n\ntype Options = {\n    steps: Step[];\n};\n\nexport const useTimer = (options: Options) => {\n    const { steps } = options;\n\n    // Initialize timer:\n    const totalTime = useMemo(\n        () => steps.reduce((total, step) => total + step.duration * 1000, 0),\n        [steps.length]\n    );\n    const [elapsed, setElapsed] = useState(0);\n    const [isComplete, setIsComplete] = useState(false);\n    const [isRunning, setIsRunning] = useState(false);\n    const [remaining, setRemaining] = useState(totalTime);\n\n    // Run the timer:\n    const tick = () => setElapsed((elapsed) => (elapsed += 100));\n    useInterval(tick, isRunning && !isComplete ? 100 : null);\n\n    // Update the remaining time:\n    useEffect(() => {\n        remaining > 0 && setRemaining(totalTime - elapsed);\n    }, [elapsed]);\n\n    // Determine if the timer is complete:\n    useEffect(() => {\n        if (remaining === 0) {\n            setIsComplete(true);\n            setIsRunning(false);\n        }\n    }, [remaining]);\n\n    // Manipulate the timer:\n    const pause = () => setIsRunning(false);\n    const reset = () => {\n        setElapsed(0);\n        setIsRunning(false);\n        setIsComplete(false);\n        setRemaining(totalTime);\n    };\n    const start = () => setIsRunning(true);\n    const toggle = () => setIsRunning((isRunning) => !isRunning);\n\n    return {\n        elapsed,\n        isComplete,\n        isRunning,\n        pause,\n        remaining,\n        reset,\n        start,\n        toggle,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}