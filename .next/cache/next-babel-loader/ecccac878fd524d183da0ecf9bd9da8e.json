{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/niels/dev/nielsrowinbik/brewtime/pages/recipe/[id]/timer.tsx\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { useTimer } from \"../../../hooks/use-timer\";\nimport { parseMillisecondsIntoTimeStamp } from \"../../../utils/parser\";\nimport recipe from \"../../../recipies/v60.json\";\n\nconst RecipeTimer = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const timer = useTimer(recipe.steps);\n\n  const onStopClick = () => {\n    if (confirm(\"Do you want to cancel the timer?\")) {\n      timer.stop();\n      router.push(`/recipe/${id}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        href: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"time\", {\n          children: parseMillisecondsIntoTimeStamp(timer.remaining)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\xA0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"total left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: parseMillisecondsIntoTimeStamp(timer.remaining)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: recipe.steps.map((step, i) => {\n          const content = /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"time\", {\n              children: parseMillisecondsIntoTimeStamp(step.duration * 1000)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: step.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true); // if (timer.currentStepIndex === i)\n          //     return (\n          //         <li key={i}>\n          //             <strong>{content}</strong>\n          //         </li>\n          //     );\n\n\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: content\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), timer.elapsed === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: timer.start,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), timer.elapsed > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: timer.toggle,\n        children: timer.isRunning ? \"Pause\" : \"Continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), timer.elapsed > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onStopClick,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\nexport default RecipeTimer;","map":{"version":3,"sources":["/home/niels/dev/nielsrowinbik/brewtime/pages/recipe/[id]/timer.tsx"],"names":["Link","useRouter","useTimer","parseMillisecondsIntoTimeStamp","recipe","RecipeTimer","router","id","query","timer","steps","onStopClick","confirm","stop","push","remaining","map","step","i","content","duration","description","elapsed","start","toggle","isRunning"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,8BAAT,QAA+C,uBAA/C;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAM;AAAEM,IAAAA;AAAF,MAASD,MAAM,CAACE,KAAtB;AAEA,QAAMC,KAAK,GAAGP,QAAQ,CAACE,MAAM,CAACM,KAAR,CAAtB;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACtB,QAAIC,OAAO,CAAC,kCAAD,CAAX,EAAiD;AAC7CH,MAAAA,KAAK,CAACI,IAAN;AACAP,MAAAA,MAAM,CAACQ,IAAP,CAAa,WAAUP,EAAG,EAA1B;AACH;AACJ,GALD;;AAOA,sBACI;AAAA,4BACI;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,GAAX;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAA,8BACI;AAAA,gCACI;AAAA,oBACKJ,8BAA8B,CAACM,KAAK,CAACM,SAAP;AADnC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAQI;AAAA,kBAAKZ,8BAA8B,CAACM,KAAK,CAACM,SAAP;AAAnC;AAAA;AAAA;AAAA;AAAA,cARJ,eAUI;AAAA,kBACKX,MAAM,CAACM,KAAP,CAAaM,GAAb,CAAiB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC3B,gBAAMC,OAAO,gBACT;AAAA,oCACI;AAAA,wBACKhB,8BAA8B,CAC3Bc,IAAI,CAACG,QAAL,GAAgB,IADW;AADnC;AAAA;AAAA;AAAA;AAAA,oBADJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ,eAOI;AAAA,wBAAOH,IAAI,CAACI;AAAZ;AAAA;AAAA;AAAA;AAAA,oBAPJ;AAAA,0BADJ,CAD2B,CAa3B;AACA;AACA;AACA;AACA;AACA;;;AAEA,8BAAO;AAAA,sBAAaF;AAAb,aAASD,CAAT;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH,SArBA;AADL;AAAA;AAAA;AAAA;AAAA,cAVJ,EAkCKT,KAAK,CAACa,OAAN,KAAkB,CAAlB,iBACG;AAAQ,QAAA,OAAO,EAAEb,KAAK,CAACc,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnCR,EAqCKd,KAAK,CAACa,OAAN,GAAgB,CAAhB,iBACG;AAAQ,QAAA,OAAO,EAAEb,KAAK,CAACe,MAAvB;AAAA,kBACKf,KAAK,CAACgB,SAAN,GAAkB,OAAlB,GAA4B;AADjC;AAAA;AAAA;AAAA;AAAA,cAtCR,EA0CKhB,KAAK,CAACa,OAAN,GAAgB,CAAhB,iBACG;AAAQ,QAAA,OAAO,EAAEX,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3CR;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuDH,CApED;;AAsEA,eAAeN,WAAf","sourcesContent":["import Link from \"next/link\";\nimport { useRouter } from \"next/router\";\n\nimport { useTimer } from \"../../../hooks/use-timer\";\nimport { parseMillisecondsIntoTimeStamp } from \"../../../utils/parser\";\n\nimport recipe from \"../../../recipies/v60.json\";\n\nconst RecipeTimer = () => {\n    const router = useRouter();\n    const { id } = router.query;\n\n    const timer = useTimer(recipe.steps);\n\n    const onStopClick = () => {\n        if (confirm(\"Do you want to cancel the timer?\")) {\n            timer.stop();\n            router.push(`/recipe/${id}`);\n        }\n    };\n\n    return (\n        <main>\n            <nav>\n                <Link href=\"/\">\n                    <button>back</button>\n                </Link>\n            </nav>\n            <article>\n                <div>\n                    <time>\n                        {parseMillisecondsIntoTimeStamp(timer.remaining)}\n                    </time>\n                    <span>&nbsp;</span>\n                    <span>total left</span>\n                </div>\n                <h1>{parseMillisecondsIntoTimeStamp(timer.remaining)}</h1>\n                {/* <h2></h2> */}\n                <ul>\n                    {recipe.steps.map((step, i) => {\n                        const content = (\n                            <>\n                                <time>\n                                    {parseMillisecondsIntoTimeStamp(\n                                        step.duration * 1000\n                                    )}\n                                </time>\n                                <span>&nbsp;</span>\n                                <span>{step.description}</span>\n                            </>\n                        );\n\n                        // if (timer.currentStepIndex === i)\n                        //     return (\n                        //         <li key={i}>\n                        //             <strong>{content}</strong>\n                        //         </li>\n                        //     );\n\n                        return <li key={i}>{content}</li>;\n                    })}\n                </ul>\n                {timer.elapsed === 0 && (\n                    <button onClick={timer.start}>Start</button>\n                )}\n                {timer.elapsed > 0 && (\n                    <button onClick={timer.toggle}>\n                        {timer.isRunning ? \"Pause\" : \"Continue\"}\n                    </button>\n                )}\n                {timer.elapsed > 0 && (\n                    <button onClick={onStopClick}>Stop</button>\n                )}\n            </article>\n        </main>\n    );\n};\n\nexport default RecipeTimer;\n"]},"metadata":{},"sourceType":"module"}