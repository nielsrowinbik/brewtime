{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/niels/dev/nielsrowinbik/brewtime/pages/recipe/[id]/timer.tsx\";\nimport { useTimer } from \"../../../hooks/use-timer\";\nimport { parseMillisecondsIntoTimeStamp } from \"../../../utils/parser\";\nimport recipe from \"../../../recipies/v60.json\";\n\nconst RecipeTimer = () => {\n  const timer = useTimer({\n    steps: recipe.steps\n  });\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"time\", {\n        children: parseMillisecondsIntoTimeStamp(timer.remaining)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"total left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"[current step duration]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"[current step description]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: recipe.steps.map((step, i) => {\n        const content = /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"time\", {\n            children: parseMillisecondsIntoTimeStamp(step.duration * 1000)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\xA0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: step.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true);\n\n        if (isCurrentStep) return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 33\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 29\n        }, this);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: content\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), !timer.isRunning && timer.elapsed === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: timer.start,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n\nexport default RecipeTimer;","map":{"version":3,"sources":["/home/niels/dev/nielsrowinbik/brewtime/pages/recipe/[id]/timer.tsx"],"names":["useTimer","parseMillisecondsIntoTimeStamp","recipe","RecipeTimer","timer","steps","remaining","map","step","i","content","duration","description","isCurrentStep","isRunning","elapsed","start"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,0BAAzB;AAEA,SAASC,8BAAT,QAA+C,uBAA/C;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,QAAMC,KAAK,GAAGJ,QAAQ,CAAC;AACnBK,IAAAA,KAAK,EAAEH,MAAM,CAACG;AADK,GAAD,CAAtB;AAIA,sBACI;AAAA,4BACI;AAAA,8BACI;AAAA,kBAAOJ,8BAA8B,CAACG,KAAK,CAACE,SAAP;AAArC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAA,gBACKJ,MAAM,CAACG,KAAP,CAAaE,GAAb,CAAiB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC3B,cAAMC,OAAO,gBACT;AAAA,kCACI;AAAA,sBACKT,8BAA8B,CAC3BO,IAAI,CAACG,QAAL,GAAgB,IADW;AADnC;AAAA;AAAA;AAAA;AAAA,kBADJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ,eAOI;AAAA,sBAAOH,IAAI,CAACI;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAPJ;AAAA,wBADJ;;AAYA,YAAIC,aAAJ,EACI,oBACI;AAAA,iCACI;AAAA,sBAASH;AAAT;AAAA;AAAA;AAAA;AAAA;AADJ,WAASD,CAAT;AAAA;AAAA;AAAA;AAAA,gBADJ;AAMJ,4BAAO;AAAA,oBAAaC;AAAb,WAASD,CAAT;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OArBA;AADL;AAAA;AAAA;AAAA;AAAA,YARJ,EAgCK,CAACL,KAAK,CAACU,SAAP,IAAoBV,KAAK,CAACW,OAAN,KAAkB,CAAtC,iBACG;AAAQ,MAAA,OAAO,EAAEX,KAAK,CAACY,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjCR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsCH,CA3CD;;AA6CA,eAAeb,WAAf","sourcesContent":["import { useTimer } from \"../../../hooks/use-timer\";\n\nimport { parseMillisecondsIntoTimeStamp } from \"../../../utils/parser\";\n\nimport recipe from \"../../../recipies/v60.json\";\n\nconst RecipeTimer = () => {\n    const timer = useTimer({\n        steps: recipe.steps,\n    });\n\n    return (\n        <article>\n            <div>\n                <time>{parseMillisecondsIntoTimeStamp(timer.remaining)}</time>\n                <span>&nbsp;</span>\n                <span>total left</span>\n            </div>\n            <h1>[current step duration]</h1>\n            <h2>[current step description]</h2>\n            <ul>\n                {recipe.steps.map((step, i) => {\n                    const content = (\n                        <>\n                            <time>\n                                {parseMillisecondsIntoTimeStamp(\n                                    step.duration * 1000\n                                )}\n                            </time>\n                            <span>&nbsp;</span>\n                            <span>{step.description}</span>\n                        </>\n                    );\n\n                    if (isCurrentStep)\n                        return (\n                            <li key={i}>\n                                <strong>{content}</strong>\n                            </li>\n                        );\n\n                    return <li key={i}>{content}</li>;\n                })}\n            </ul>\n            {!timer.isRunning && timer.elapsed === 0 && (\n                <button onClick={timer.start}>Start</button>\n            )}\n        </article>\n    );\n};\n\nexport default RecipeTimer;\n"]},"metadata":{},"sourceType":"module"}