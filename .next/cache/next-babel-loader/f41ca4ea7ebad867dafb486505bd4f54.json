{"ast":null,"code":"import { useState, useMemo } from \"react\";\nimport { useInterval } from \"./use-interval\";\nexport const useTimer = options => {\n  const {\n    steps\n  } = options; // Initialize timer:\n\n  const totalTime = useMemo(() => steps.reduce((total, step) => total + step.duration * 1000, 0), [steps.length]);\n  const {\n    0: elapsed,\n    1: setElapsed\n  } = useState(0);\n  const {\n    0: isRunning,\n    1: setIsRunning\n  } = useState(false);\n  const remaining = useMemo(() => totalTime - elapsed, [elapsed]);\n  const isComplete = useMemo(() => remaining === 0, [remaining]);\n  const currentStep = useMemo(() => 0, [elapsed]); // Run the timer:\n\n  const tick = () => setElapsed(elapsed => elapsed += 100);\n\n  useInterval(tick, isRunning && !isComplete ? 100 : null); // Manipulate the timer:\n\n  const pause = () => setIsRunning(false);\n\n  const reset = () => {\n    setElapsed(0);\n    setIsRunning(false);\n  };\n\n  const start = () => setIsRunning(true);\n\n  const toggle = () => setIsRunning(isRunning => !isRunning);\n\n  return {\n    elapsed,\n    isComplete,\n    isRunning,\n    pause,\n    remaining,\n    reset,\n    start,\n    toggle\n  };\n};","map":{"version":3,"sources":["/home/niels/dev/nielsrowinbik/brewtime/hooks/use-timer.ts"],"names":["useState","useMemo","useInterval","useTimer","options","steps","totalTime","reduce","total","step","duration","length","elapsed","setElapsed","isRunning","setIsRunning","remaining","isComplete","currentStep","tick","pause","reset","start","toggle"],"mappings":"AAAA,SAASA,QAAT,EAA8BC,OAA9B,QAA6C,OAA7C;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAWA,OAAO,MAAMC,QAAQ,GAAIC,OAAD,IAAsB;AAC1C,QAAM;AAAEC,IAAAA;AAAF,MAAYD,OAAlB,CAD0C,CAG1C;;AACA,QAAME,SAAS,GAAGL,OAAO,CACrB,MAAMI,KAAK,CAACE,MAAN,CAAa,CAACC,KAAD,EAAQC,IAAR,KAAiBD,KAAK,GAAGC,IAAI,CAACC,QAAL,GAAgB,IAAtD,EAA4D,CAA5D,CADe,EAErB,CAACL,KAAK,CAACM,MAAP,CAFqB,CAAzB;AAIA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBb,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM;AAAA,OAACc,SAAD;AAAA,OAAYC;AAAZ,MAA4Bf,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMgB,SAAS,GAAGf,OAAO,CAAC,MAAMK,SAAS,GAAGM,OAAnB,EAA4B,CAACA,OAAD,CAA5B,CAAzB;AACA,QAAMK,UAAU,GAAGhB,OAAO,CAAC,MAAMe,SAAS,KAAK,CAArB,EAAwB,CAACA,SAAD,CAAxB,CAA1B;AACA,QAAME,WAAW,GAAGjB,OAAO,CAAC,MAAM,CAAP,EAAU,CAACW,OAAD,CAAV,CAA3B,CAZ0C,CAc1C;;AACA,QAAMO,IAAI,GAAG,MAAMN,UAAU,CAAED,OAAD,IAAcA,OAAO,IAAI,GAA1B,CAA7B;;AACAV,EAAAA,WAAW,CAACiB,IAAD,EAAOL,SAAS,IAAI,CAACG,UAAd,GAA2B,GAA3B,GAAiC,IAAxC,CAAX,CAhB0C,CAkB1C;;AACA,QAAMG,KAAK,GAAG,MAAML,YAAY,CAAC,KAAD,CAAhC;;AACA,QAAMM,KAAK,GAAG,MAAM;AAChBR,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAIA,QAAMO,KAAK,GAAG,MAAMP,YAAY,CAAC,IAAD,CAAhC;;AACA,QAAMQ,MAAM,GAAG,MAAMR,YAAY,CAAED,SAAD,IAAe,CAACA,SAAjB,CAAjC;;AAEA,SAAO;AACHF,IAAAA,OADG;AAEHK,IAAAA,UAFG;AAGHH,IAAAA,SAHG;AAIHM,IAAAA,KAJG;AAKHJ,IAAAA,SALG;AAMHK,IAAAA,KANG;AAOHC,IAAAA,KAPG;AAQHC,IAAAA;AARG,GAAP;AAUH,CArCM","sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\n\nimport { useInterval } from \"./use-interval\";\n\ntype Step = {\n    description: string;\n    duration: number;\n};\n\ntype Options = {\n    steps: Step[];\n};\n\nexport const useTimer = (options: Options) => {\n    const { steps } = options;\n\n    // Initialize timer:\n    const totalTime = useMemo(\n        () => steps.reduce((total, step) => total + step.duration * 1000, 0),\n        [steps.length]\n    );\n    const [elapsed, setElapsed] = useState(0);\n    const [isRunning, setIsRunning] = useState(false);\n    const remaining = useMemo(() => totalTime - elapsed, [elapsed]);\n    const isComplete = useMemo(() => remaining === 0, [remaining]);\n    const currentStep = useMemo(() => 0, [elapsed]);\n\n    // Run the timer:\n    const tick = () => setElapsed((elapsed) => (elapsed += 100));\n    useInterval(tick, isRunning && !isComplete ? 100 : null);\n\n    // Manipulate the timer:\n    const pause = () => setIsRunning(false);\n    const reset = () => {\n        setElapsed(0);\n        setIsRunning(false);\n    };\n    const start = () => setIsRunning(true);\n    const toggle = () => setIsRunning((isRunning) => !isRunning);\n\n    return {\n        elapsed,\n        isComplete,\n        isRunning,\n        pause,\n        remaining,\n        reset,\n        start,\n        toggle,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}