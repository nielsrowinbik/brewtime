{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState, useMemo, useEffect } from \"react\";\nimport { useInterval } from \"./use-interval\";\nimport { usePrevious } from \"./use-previous\";\nimport { sum, valuesForKey } from \"../utils/helpers\";\nexport var useTimer = function useTimer(userSteps) {\n  _s();\n\n  // Store whether the timer is running in state:\n  var _useState = useState(false),\n      isRunning = _useState[0],\n      setIsRunning = _useState[1]; // Store both current and previous tick timestamps so we can\n  // compute the difference between them:\n\n\n  var _useState2 = useState(0),\n      currentTick = _useState2[0],\n      setCurrentTick = _useState2[1];\n\n  var previousTick = usePrevious(currentTick); // Store total elapsed time in state:\n\n  var _useState3 = useState(0),\n      elapsed = _useState3[0],\n      setElapsed = _useState3[1]; // Compute the total time needed to complete this timer:\n\n\n  var totalTime = useMemo(function () {\n    return sum(valuesForKey(userSteps, \"duration\")) * 1000;\n  }, [userSteps.length]); // Compute the remaining time:\n\n  var remaining = useMemo(function () {\n    return totalTime - elapsed;\n  }, [elapsed]); // Every tick, update the current tick in state:\n\n  var tick = function tick() {\n    return setCurrentTick(Date.now());\n  }; // Tick every 100 millisecons when timer is running:\n\n\n  useInterval(tick, isRunning ? 100 : null); // Update the total elapsed time by adding the difference\n  // between the current and the previous tick to the previous total:\n\n  useEffect(function () {\n    console.log(previousTick, currentTick, currentTick - previousTick);\n    setElapsed(function (elapsed) {\n      return !previousTick ? 0 : elapsed + (currentTick - previousTick);\n    });\n  }, [currentTick]); // Expose a method to start the timer:\n\n  var start = useCallback(function () {\n    setIsRunning(true);\n    setCurrentTick(Date.now());\n  }, []); // Expose a method to stop (pause) the timer:\n\n  var stop = useCallback(function () {\n    setIsRunning(false);\n    setCurrentTick(Date.now());\n  }, []); // Expose a method to reset the timer:\n\n  var reset = useCallback(function () {\n    setIsRunning(false);\n    setElapsed(0);\n  }, []); // // Add a \"start\" field to every step that was passed in so we\n  // // can determine which step is the current:\n  // const steps = useMemo(\n  //     () =>\n  //         userSteps.map((step, i) => ({\n  //             // We copy the original step as not to lose any nformation.\n  //             ...step,\n  //             // We convert step duration, which is configured in seconds,\n  //             // to milliseconds here. This overwrites the original duration\n  //             // value!\n  //             duration: step.duration * 1000,\n  //             // The start is determined by the sum of all durations of\n  //             // the previous steps. Once these durations have passed,\n  //             // the current step is active. Finally, subtract 1000 milliseconds\n  //             // to always start a round \"early\".\n  //             start:\n  //                 userSteps\n  //                     .slice(0, i)\n  //                     .reduce(\n  //                         (total, { duration }) => total + duration * 1000,\n  //                         0\n  //                     ) - 1000,\n  //         })),\n  //     [userSteps.length]\n  // );\n  // // Compute the total time, so we can determine whether the timer is done:\n  // const totalTime = useMemo(\n  //     () =>\n  //         userSteps.reduce(\n  //             (total, { duration }) => total + duration * 1000,\n  //             0\n  //         ),\n  //     [userSteps.length]\n  // );\n  // // Keep the elapsed milliseconds in state:\n  // const [elapsed, setElapsed] = useState(0);\n  // // Keep whether the timer is running in state:\n  // const [isRunning, setIsRunning] = useState(false);\n  // // Calculate the total time remaining:\n  // const remaining = useMemo(() => totalTime - elapsed, [elapsed]);\n  // // Determine whether the timer is complete:\n  // const isComplete = useMemo(() => remaining === 0, [remaining]);\n  // // Compute the current step's index. This index is equal to the\n  // // index of the first step that we find of which we have not yet\n  // // passed the start moment, minus one.\n  // const currentStepIndex = useMemo(\n  //     () => steps.findIndex(({ start }) => elapsed < start) - 1,\n  //     [elapsed]\n  // );\n  // // Compute the actual current step:\n  // const currentStep = useMemo(() => steps[currentStepIndex], [\n  //     currentStepIndex,\n  // ]);\n  // // Compute how much time is remaining in the current step\n  // const currentStepRemaining = useMemo(\n  //     () => steps[currentStepIndex].duration,\n  //     [currentStepIndex, elapsed]\n  // );\n  // // Run the timer:\n  // const tick = () => setElapsed((elapsed) => (elapsed += STEPSIZE));\n  // useInterval(tick, isRunning && !isComplete ? STEPSIZE : null);\n  // Expose some helper methods to manipulate the timer:\n  // const pause = useCallback(() => setIsRunning(false), []);\n  // const reset = useCallback(() => {\n  //     setElapsed(0);\n  //     setIsRunning(false);\n  // }, []);\n  // const start = useCallback(() => setIsRunning(true), []);\n  // const toggle = useCallback(\n  //     () => setIsRunning((isRunning) => !isRunning),\n  //     []\n  // );\n\n  return {\n    elapsed: elapsed,\n    isRunning: isRunning,\n    remaining: remaining,\n    reset: reset,\n    start: start,\n    stop: stop\n  };\n};\n\n_s(useTimer, \"RfEI3t5ZZUmBnvMkNL4hre2nphA=\", false, function () {\n  return [usePrevious, useInterval];\n});","map":{"version":3,"sources":["/home/niels/dev/nielsrowinbik/brewtime/hooks/use-timer.ts"],"names":["useCallback","useState","useMemo","useEffect","useInterval","usePrevious","sum","valuesForKey","useTimer","userSteps","isRunning","setIsRunning","currentTick","setCurrentTick","previousTick","elapsed","setElapsed","totalTime","length","remaining","tick","Date","now","console","log","start","stop","reset"],"mappings":"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","sourcesContent":["import { useCallback, useState, useMemo, useEffect } from \"react\";\n\nimport { useInterval } from \"./use-interval\";\nimport { usePrevious } from \"./use-previous\";\n\nimport { sum, valuesForKey } from \"../utils/helpers\";\n\ntype Step = {\n    description: string;\n    duration: number;\n};\n\nexport const useTimer = (userSteps: Step[]) => {\n    // Store whether the timer is running in state:\n    const [isRunning, setIsRunning] = useState(false);\n\n    // Store both current and previous tick timestamps so we can\n    // compute the difference between them:\n    const [currentTick, setCurrentTick] = useState(0);\n    const previousTick = usePrevious(currentTick);\n\n    // Store total elapsed time in state:\n    const [elapsed, setElapsed] = useState(0);\n\n    // Compute the total time needed to complete this timer:\n    const totalTime = useMemo(\n        () => sum(valuesForKey(userSteps, \"duration\")) * 1000,\n        [userSteps.length]\n    );\n\n    // Compute the remaining time:\n    const remaining = useMemo(() => totalTime - elapsed, [elapsed]);\n\n    // Every tick, update the current tick in state:\n    const tick = () => setCurrentTick(Date.now());\n\n    // Tick every 100 millisecons when timer is running:\n    useInterval(tick, isRunning ? 100 : null);\n\n    // Update the total elapsed time by adding the difference\n    // between the current and the previous tick to the previous total:\n    useEffect(() => {\n        console.log(previousTick, currentTick, currentTick - previousTick);\n        setElapsed((elapsed) =>\n            !previousTick ? 0 : elapsed + (currentTick - previousTick)\n        );\n    }, [currentTick]);\n\n    // Expose a method to start the timer:\n    const start = useCallback(() => {\n        setIsRunning(true);\n        setCurrentTick(Date.now());\n    }, []);\n\n    // Expose a method to stop (pause) the timer:\n    const stop = useCallback(() => {\n        setIsRunning(false);\n        setCurrentTick(Date.now());\n    }, []);\n\n    // Expose a method to reset the timer:\n    const reset = useCallback(() => {\n        setIsRunning(false);\n        setElapsed(0);\n    }, []);\n\n    // // Add a \"start\" field to every step that was passed in so we\n    // // can determine which step is the current:\n    // const steps = useMemo(\n    //     () =>\n    //         userSteps.map((step, i) => ({\n    //             // We copy the original step as not to lose any nformation.\n    //             ...step,\n\n    //             // We convert step duration, which is configured in seconds,\n    //             // to milliseconds here. This overwrites the original duration\n    //             // value!\n    //             duration: step.duration * 1000,\n\n    //             // The start is determined by the sum of all durations of\n    //             // the previous steps. Once these durations have passed,\n    //             // the current step is active. Finally, subtract 1000 milliseconds\n    //             // to always start a round \"early\".\n    //             start:\n    //                 userSteps\n    //                     .slice(0, i)\n    //                     .reduce(\n    //                         (total, { duration }) => total + duration * 1000,\n    //                         0\n    //                     ) - 1000,\n    //         })),\n    //     [userSteps.length]\n    // );\n\n    // // Compute the total time, so we can determine whether the timer is done:\n    // const totalTime = useMemo(\n    //     () =>\n    //         userSteps.reduce(\n    //             (total, { duration }) => total + duration * 1000,\n    //             0\n    //         ),\n    //     [userSteps.length]\n    // );\n\n    // // Keep the elapsed milliseconds in state:\n    // const [elapsed, setElapsed] = useState(0);\n\n    // // Keep whether the timer is running in state:\n    // const [isRunning, setIsRunning] = useState(false);\n\n    // // Calculate the total time remaining:\n    // const remaining = useMemo(() => totalTime - elapsed, [elapsed]);\n\n    // // Determine whether the timer is complete:\n    // const isComplete = useMemo(() => remaining === 0, [remaining]);\n\n    // // Compute the current step's index. This index is equal to the\n    // // index of the first step that we find of which we have not yet\n    // // passed the start moment, minus one.\n    // const currentStepIndex = useMemo(\n    //     () => steps.findIndex(({ start }) => elapsed < start) - 1,\n    //     [elapsed]\n    // );\n\n    // // Compute the actual current step:\n    // const currentStep = useMemo(() => steps[currentStepIndex], [\n    //     currentStepIndex,\n    // ]);\n\n    // // Compute how much time is remaining in the current step\n    // const currentStepRemaining = useMemo(\n    //     () => steps[currentStepIndex].duration,\n    //     [currentStepIndex, elapsed]\n    // );\n\n    // // Run the timer:\n    // const tick = () => setElapsed((elapsed) => (elapsed += STEPSIZE));\n    // useInterval(tick, isRunning && !isComplete ? STEPSIZE : null);\n\n    // Expose some helper methods to manipulate the timer:\n    // const pause = useCallback(() => setIsRunning(false), []);\n    // const reset = useCallback(() => {\n    //     setElapsed(0);\n    //     setIsRunning(false);\n    // }, []);\n    // const start = useCallback(() => setIsRunning(true), []);\n    // const toggle = useCallback(\n    //     () => setIsRunning((isRunning) => !isRunning),\n    //     []\n    // );\n\n    return {\n        elapsed,\n        isRunning,\n        remaining,\n        reset,\n        start,\n        stop,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}