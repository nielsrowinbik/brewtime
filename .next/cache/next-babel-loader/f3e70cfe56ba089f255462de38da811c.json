{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useMemo } from \"react\";\nimport { useInterval } from \"./use-interval\";\nexport var useTimer = function useTimer(options) {\n  _s();\n\n  var steps = options.steps; // Initialize timer:\n\n  var totalTime = useMemo(function () {\n    return steps.reduce(function (total, step) {\n      return total + step.duration * 1000;\n    }, 0);\n  }, [steps.length]);\n\n  var _useState = useState(0),\n      elapsed = _useState[0],\n      setElapsed = _useState[1];\n\n  var _useState2 = useState(false),\n      isRunning = _useState2[0],\n      setIsRunning = _useState2[1];\n\n  var remaining = useMemo(function () {\n    return totalTime - elapsed;\n  }, [elapsed]);\n  var isComplete = useMemo(function () {\n    return remaining === 0;\n  }, [remaining]);\n  var currentStep = useMemo(function () {\n    return 0;\n  }, [elapsed]); // Run the timer:\n\n  var tick = function tick() {\n    return setElapsed(function (elapsed) {\n      return elapsed += 100;\n    });\n  };\n\n  useInterval(tick, isRunning && !isComplete ? 100 : null); // Manipulate the timer:\n\n  var pause = function pause() {\n    return setIsRunning(false);\n  };\n\n  var reset = function reset() {\n    setElapsed(0);\n    setIsRunning(false);\n  };\n\n  var start = function start() {\n    return setIsRunning(true);\n  };\n\n  var toggle = function toggle() {\n    return setIsRunning(function (isRunning) {\n      return !isRunning;\n    });\n  };\n\n  return {\n    elapsed: elapsed,\n    isComplete: isComplete,\n    isRunning: isRunning,\n    pause: pause,\n    remaining: remaining,\n    reset: reset,\n    start: start,\n    toggle: toggle\n  };\n};\n\n_s(useTimer, \"d2DWqFth2KOf0qQF+QV1CGRj1X8=\", false, function () {\n  return [useInterval];\n});","map":{"version":3,"sources":["/home/niels/dev/nielsrowinbik/brewtime/hooks/use-timer.ts"],"names":["useState","useMemo","useInterval","useTimer","options","steps","totalTime","reduce","total","step","duration","length","elapsed","setElapsed","isRunning","setIsRunning","remaining","isComplete","currentStep","tick","pause","reset","start","toggle"],"mappings":";;AAAA,SAASA,QAAT,EAA8BC,OAA9B,QAA6C,OAA7C;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAWA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,OAAD,EAAsB;AAAA;;AAAA,MAClCC,KADkC,GACxBD,OADwB,CAClCC,KADkC,EAG1C;;AACA,MAAMC,SAAS,GAAGL,OAAO,CACrB;AAAA,WAAMI,KAAK,CAACE,MAAN,CAAa,UAACC,KAAD,EAAQC,IAAR;AAAA,aAAiBD,KAAK,GAAGC,IAAI,CAACC,QAAL,GAAgB,IAAzC;AAAA,KAAb,EAA4D,CAA5D,CAAN;AAAA,GADqB,EAErB,CAACL,KAAK,CAACM,MAAP,CAFqB,CAAzB;;AAJ0C,kBAQZX,QAAQ,CAAC,CAAD,CARI;AAAA,MAQnCY,OARmC;AAAA,MAQ1BC,UAR0B;;AAAA,mBASRb,QAAQ,CAAC,KAAD,CATA;AAAA,MASnCc,SATmC;AAAA,MASxBC,YATwB;;AAU1C,MAAMC,SAAS,GAAGf,OAAO,CAAC;AAAA,WAAMK,SAAS,GAAGM,OAAlB;AAAA,GAAD,EAA4B,CAACA,OAAD,CAA5B,CAAzB;AACA,MAAMK,UAAU,GAAGhB,OAAO,CAAC;AAAA,WAAMe,SAAS,KAAK,CAApB;AAAA,GAAD,EAAwB,CAACA,SAAD,CAAxB,CAA1B;AACA,MAAME,WAAW,GAAGjB,OAAO,CAAC;AAAA,WAAM,CAAN;AAAA,GAAD,EAAU,CAACW,OAAD,CAAV,CAA3B,CAZ0C,CAc1C;;AACA,MAAMO,IAAI,GAAG,SAAPA,IAAO;AAAA,WAAMN,UAAU,CAAC,UAACD,OAAD;AAAA,aAAcA,OAAO,IAAI,GAAzB;AAAA,KAAD,CAAhB;AAAA,GAAb;;AACAV,EAAAA,WAAW,CAACiB,IAAD,EAAOL,SAAS,IAAI,CAACG,UAAd,GAA2B,GAA3B,GAAiC,IAAxC,CAAX,CAhB0C,CAkB1C;;AACA,MAAMG,KAAK,GAAG,SAARA,KAAQ;AAAA,WAAML,YAAY,CAAC,KAAD,CAAlB;AAAA,GAAd;;AACA,MAAMM,KAAK,GAAG,SAARA,KAAQ,GAAM;AAChBR,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAIA,MAAMO,KAAK,GAAG,SAARA,KAAQ;AAAA,WAAMP,YAAY,CAAC,IAAD,CAAlB;AAAA,GAAd;;AACA,MAAMQ,MAAM,GAAG,SAATA,MAAS;AAAA,WAAMR,YAAY,CAAC,UAACD,SAAD;AAAA,aAAe,CAACA,SAAhB;AAAA,KAAD,CAAlB;AAAA,GAAf;;AAEA,SAAO;AACHF,IAAAA,OAAO,EAAPA,OADG;AAEHK,IAAAA,UAAU,EAAVA,UAFG;AAGHH,IAAAA,SAAS,EAATA,SAHG;AAIHM,IAAAA,KAAK,EAALA,KAJG;AAKHJ,IAAAA,SAAS,EAATA,SALG;AAMHK,IAAAA,KAAK,EAALA,KANG;AAOHC,IAAAA,KAAK,EAALA,KAPG;AAQHC,IAAAA,MAAM,EAANA;AARG,GAAP;AAUH,CArCM;;GAAMpB,Q;UAgBTD,W","sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\n\nimport { useInterval } from \"./use-interval\";\n\ntype Step = {\n    description: string;\n    duration: number;\n};\n\ntype Options = {\n    steps: Step[];\n};\n\nexport const useTimer = (options: Options) => {\n    const { steps } = options;\n\n    // Initialize timer:\n    const totalTime = useMemo(\n        () => steps.reduce((total, step) => total + step.duration * 1000, 0),\n        [steps.length]\n    );\n    const [elapsed, setElapsed] = useState(0);\n    const [isRunning, setIsRunning] = useState(false);\n    const remaining = useMemo(() => totalTime - elapsed, [elapsed]);\n    const isComplete = useMemo(() => remaining === 0, [remaining]);\n    const currentStep = useMemo(() => 0, [elapsed]);\n\n    // Run the timer:\n    const tick = () => setElapsed((elapsed) => (elapsed += 100));\n    useInterval(tick, isRunning && !isComplete ? 100 : null);\n\n    // Manipulate the timer:\n    const pause = () => setIsRunning(false);\n    const reset = () => {\n        setElapsed(0);\n        setIsRunning(false);\n    };\n    const start = () => setIsRunning(true);\n    const toggle = () => setIsRunning((isRunning) => !isRunning);\n\n    return {\n        elapsed,\n        isComplete,\n        isRunning,\n        pause,\n        remaining,\n        reset,\n        start,\n        toggle,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}