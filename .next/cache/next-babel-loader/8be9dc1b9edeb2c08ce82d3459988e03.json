{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useMemo } from \"react\";\nimport { useInterval } from \"./use-interval\";\n// Yeah turns out this method is awful. Rewrite to something\n// like this: https://stackoverflow.com/a/57981688\nvar STEPSIZE = 100;\nexport var useTimer = function useTimer(userSteps) {\n  _s();\n\n  // Add a \"start\" field to every step that was passed in so we\n  // can determine which step is the current:\n  var steps = useMemo(function () {\n    return userSteps.map(function (step, i) {\n      return _objectSpread(_objectSpread({}, step), {}, {\n        // We convert step duration, which is configured in seconds,\n        // to milliseconds here. This overwrites the original duration\n        // value!\n        duration: step.duration * 1000,\n        // The start is determined by the sum of all durations of\n        // the previous steps. Once these durations have passed,\n        // the current step is active. Finally, subtract 1000 milliseconds\n        // to always start a round \"early\".\n        start: userSteps.slice(0, i).reduce(function (total, _ref) {\n          var duration = _ref.duration;\n          return total + duration * 1000;\n        }, 0) - 1000\n      });\n    });\n  }, [userSteps.length]); // Compute the total time, so we can determine whether the timer is done:\n\n  var totalTime = useMemo(function () {\n    return userSteps.reduce(function (total, _ref2) {\n      var duration = _ref2.duration;\n      return total + duration * 1000;\n    }, 0);\n  }, [userSteps.length]); // Keep the elapsed milliseconds in state:\n\n  var _useState = useState(0),\n      elapsed = _useState[0],\n      setElapsed = _useState[1]; // Keep whether the timer is running in state:\n\n\n  var _useState2 = useState(false),\n      isRunning = _useState2[0],\n      setIsRunning = _useState2[1]; // Calculate the total time remaining:\n\n\n  var remaining = useMemo(function () {\n    return totalTime - elapsed;\n  }, [elapsed]); // Determine whether the timer is complete:\n\n  var isComplete = useMemo(function () {\n    return remaining === 0;\n  }, [remaining]); // Compute the current step's index. This index is equal to the\n  // index of the first step that we find of which we have not yet\n  // passed the start moment, minus one.\n\n  var currentStepIndex = useMemo(function () {\n    return steps.findIndex(function (_ref3) {\n      var start = _ref3.start;\n      return elapsed < start;\n    }) - 1;\n  }, [elapsed]); // Compute the actual current step:\n\n  var currentStep = useMemo(function () {\n    return steps[currentStepIndex];\n  }, [currentStepIndex]); // Compute how much time is remaining in the current step\n\n  var currentStepRemaining = useMemo(function () {\n    return steps[currentStepIndex].duration;\n  }, [currentStepIndex, elapsed]); // Run the timer:\n\n  var tick = function tick() {\n    return setElapsed(function (elapsed) {\n      return elapsed += STEPSIZE;\n    });\n  };\n\n  useInterval(tick, isRunning && !isComplete ? STEPSIZE : null); // Expose some helper methods to manipulate the timer:\n  // const pause = useCallback(() => setIsRunning(false), []);\n  // const reset = useCallback(() => {\n  //     setElapsed(0);\n  //     setIsRunning(false);\n  // }, []);\n  // const start = useCallback(() => setIsRunning(true), []);\n  // const toggle = useCallback(\n  //     () => setIsRunning((isRunning) => !isRunning),\n  //     []\n  // );\n\n  return {};\n};\n\n_s(useTimer, \"GeFeFTtba8MOAHtbSKhoP6Z60cw=\", false, function () {\n  return [useInterval];\n});","map":{"version":3,"sources":["/home/niels/dev/nielsrowinbik/brewtime/hooks/use-timer.ts"],"names":["useState","useMemo","useInterval","STEPSIZE","useTimer","userSteps","steps","map","step","i","duration","start","slice","reduce","total","length","totalTime","elapsed","setElapsed","isRunning","setIsRunning","remaining","isComplete","currentStepIndex","findIndex","currentStep","currentStepRemaining","tick"],"mappings":";;;;;;;;AAAA,SAAsBA,QAAtB,EAAgCC,OAAhC,QAA+C,OAA/C;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAOA;AACA;AAEA,IAAMC,QAAQ,GAAG,GAAjB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAuB;AAAA;;AAC3C;AACA;AACA,MAAMC,KAAK,GAAGL,OAAO,CACjB;AAAA,WACII,SAAS,CAACE,GAAV,CAAc,UAACC,IAAD,EAAOC,CAAP;AAAA,6CAEPD,IAFO;AAIV;AACA;AACA;AACAE,QAAAA,QAAQ,EAAEF,IAAI,CAACE,QAAL,GAAgB,IAPhB;AASV;AACA;AACA;AACA;AACAC,QAAAA,KAAK,EACDN,SAAS,CACJO,KADL,CACW,CADX,EACcH,CADd,EAEKI,MAFL,CAGQ,UAACC,KAAD;AAAA,cAAUJ,QAAV,QAAUA,QAAV;AAAA,iBAAyBI,KAAK,GAAGJ,QAAQ,GAAG,IAA5C;AAAA,SAHR,EAIQ,CAJR,IAKQ;AAnBF;AAAA,KAAd,CADJ;AAAA,GADiB,EAuBjB,CAACL,SAAS,CAACU,MAAX,CAvBiB,CAArB,CAH2C,CA6B3C;;AACA,MAAMC,SAAS,GAAGf,OAAO,CACrB;AAAA,WACII,SAAS,CAACQ,MAAV,CACI,UAACC,KAAD;AAAA,UAAUJ,QAAV,SAAUA,QAAV;AAAA,aAAyBI,KAAK,GAAGJ,QAAQ,GAAG,IAA5C;AAAA,KADJ,EAEI,CAFJ,CADJ;AAAA,GADqB,EAMrB,CAACL,SAAS,CAACU,MAAX,CANqB,CAAzB,CA9B2C,CAuC3C;;AAvC2C,kBAwCbf,QAAQ,CAAC,CAAD,CAxCK;AAAA,MAwCpCiB,OAxCoC;AAAA,MAwC3BC,UAxC2B,iBA0C3C;;;AA1C2C,mBA2CTlB,QAAQ,CAAC,KAAD,CA3CC;AAAA,MA2CpCmB,SA3CoC;AAAA,MA2CzBC,YA3CyB,kBA6C3C;;;AACA,MAAMC,SAAS,GAAGpB,OAAO,CAAC;AAAA,WAAMe,SAAS,GAAGC,OAAlB;AAAA,GAAD,EAA4B,CAACA,OAAD,CAA5B,CAAzB,CA9C2C,CAgD3C;;AACA,MAAMK,UAAU,GAAGrB,OAAO,CAAC;AAAA,WAAMoB,SAAS,KAAK,CAApB;AAAA,GAAD,EAAwB,CAACA,SAAD,CAAxB,CAA1B,CAjD2C,CAmD3C;AACA;AACA;;AACA,MAAME,gBAAgB,GAAGtB,OAAO,CAC5B;AAAA,WAAMK,KAAK,CAACkB,SAAN,CAAgB;AAAA,UAAGb,KAAH,SAAGA,KAAH;AAAA,aAAeM,OAAO,GAAGN,KAAzB;AAAA,KAAhB,IAAkD,CAAxD;AAAA,GAD4B,EAE5B,CAACM,OAAD,CAF4B,CAAhC,CAtD2C,CA2D3C;;AACA,MAAMQ,WAAW,GAAGxB,OAAO,CAAC;AAAA,WAAMK,KAAK,CAACiB,gBAAD,CAAX;AAAA,GAAD,EAAgC,CACvDA,gBADuD,CAAhC,CAA3B,CA5D2C,CAgE3C;;AACA,MAAMG,oBAAoB,GAAGzB,OAAO,CAChC;AAAA,WAAMK,KAAK,CAACiB,gBAAD,CAAL,CAAwBb,QAA9B;AAAA,GADgC,EAEhC,CAACa,gBAAD,EAAmBN,OAAnB,CAFgC,CAApC,CAjE2C,CAsE3C;;AACA,MAAMU,IAAI,GAAG,SAAPA,IAAO;AAAA,WAAMT,UAAU,CAAC,UAACD,OAAD;AAAA,aAAcA,OAAO,IAAId,QAAzB;AAAA,KAAD,CAAhB;AAAA,GAAb;;AACAD,EAAAA,WAAW,CAACyB,IAAD,EAAOR,SAAS,IAAI,CAACG,UAAd,GAA2BnB,QAA3B,GAAsC,IAA7C,CAAX,CAxE2C,CA0E3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO,EAAP;AACH,CAvFM;;GAAMC,Q;UAwETF,W","sourcesContent":["import { useCallback, useState, useMemo } from \"react\";\n\nimport { useInterval } from \"./use-interval\";\n\ntype Step = {\n    description: string;\n    duration: number;\n};\n\n// Yeah turns out this method is awful. Rewrite to something\n// like this: https://stackoverflow.com/a/57981688\n\nconst STEPSIZE = 100;\n\nexport const useTimer = (userSteps: Step[]) => {\n    // Add a \"start\" field to every step that was passed in so we\n    // can determine which step is the current:\n    const steps = useMemo(\n        () =>\n            userSteps.map((step, i) => ({\n                // We copy the original step as not to lose any nformation.\n                ...step,\n\n                // We convert step duration, which is configured in seconds,\n                // to milliseconds here. This overwrites the original duration\n                // value!\n                duration: step.duration * 1000,\n\n                // The start is determined by the sum of all durations of\n                // the previous steps. Once these durations have passed,\n                // the current step is active. Finally, subtract 1000 milliseconds\n                // to always start a round \"early\".\n                start:\n                    userSteps\n                        .slice(0, i)\n                        .reduce(\n                            (total, { duration }) => total + duration * 1000,\n                            0\n                        ) - 1000,\n            })),\n        [userSteps.length]\n    );\n\n    // Compute the total time, so we can determine whether the timer is done:\n    const totalTime = useMemo(\n        () =>\n            userSteps.reduce(\n                (total, { duration }) => total + duration * 1000,\n                0\n            ),\n        [userSteps.length]\n    );\n\n    // Keep the elapsed milliseconds in state:\n    const [elapsed, setElapsed] = useState(0);\n\n    // Keep whether the timer is running in state:\n    const [isRunning, setIsRunning] = useState(false);\n\n    // Calculate the total time remaining:\n    const remaining = useMemo(() => totalTime - elapsed, [elapsed]);\n\n    // Determine whether the timer is complete:\n    const isComplete = useMemo(() => remaining === 0, [remaining]);\n\n    // Compute the current step's index. This index is equal to the\n    // index of the first step that we find of which we have not yet\n    // passed the start moment, minus one.\n    const currentStepIndex = useMemo(\n        () => steps.findIndex(({ start }) => elapsed < start) - 1,\n        [elapsed]\n    );\n\n    // Compute the actual current step:\n    const currentStep = useMemo(() => steps[currentStepIndex], [\n        currentStepIndex,\n    ]);\n\n    // Compute how much time is remaining in the current step\n    const currentStepRemaining = useMemo(\n        () => steps[currentStepIndex].duration,\n        [currentStepIndex, elapsed]\n    );\n\n    // Run the timer:\n    const tick = () => setElapsed((elapsed) => (elapsed += STEPSIZE));\n    useInterval(tick, isRunning && !isComplete ? STEPSIZE : null);\n\n    // Expose some helper methods to manipulate the timer:\n    // const pause = useCallback(() => setIsRunning(false), []);\n    // const reset = useCallback(() => {\n    //     setElapsed(0);\n    //     setIsRunning(false);\n    // }, []);\n    // const start = useCallback(() => setIsRunning(true), []);\n    // const toggle = useCallback(\n    //     () => setIsRunning((isRunning) => !isRunning),\n    //     []\n    // );\n\n    return {};\n};\n"]},"metadata":{},"sourceType":"module"}