{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useMemo } from \"react\";\nimport { useInterval } from \"./use-interval\";\nexport const useTimer = userSteps => {\n  // Initialize timer:\n  const steps = useMemo(() => userSteps.map((step, i) => _objectSpread(_objectSpread({}, step), {}, {\n    duration: step.duration * 1000,\n    start: userSteps.slice(0, i).reduce((total, {\n      duration\n    }) => total + duration * 1000, 0)\n  })), [userSteps.length]);\n  const totalTime = useMemo(() => userSteps.reduce((total, {\n    duration\n  }) => total + duration * 1000, 0), [userSteps.length]);\n  const {\n    0: elapsed,\n    1: setElapsed\n  } = useState(0);\n  const {\n    0: isRunning,\n    1: setIsRunning\n  } = useState(false);\n  const remaining = useMemo(() => totalTime - elapsed, [elapsed]);\n  const isComplete = useMemo(() => remaining === 0, [remaining]);\n  const currentStepIndex = useMemo(() => steps.findIndex(({\n    start\n  }) => elapsed < start) - 1, [elapsed]); // Run the timer:\n\n  const tick = () => setElapsed(elapsed => elapsed += 100);\n\n  useInterval(tick, isRunning && !isComplete ? 100 : null); // Manipulate the timer:\n\n  const pause = () => setIsRunning(false);\n\n  const reset = () => {\n    setElapsed(0);\n    setIsRunning(false);\n  };\n\n  const start = () => setIsRunning(true);\n\n  const toggle = () => setIsRunning(isRunning => !isRunning);\n\n  return {\n    currentStepIndex,\n    elapsed,\n    isComplete,\n    isRunning,\n    pause,\n    remaining,\n    reset,\n    start,\n    toggle\n  };\n};","map":{"version":3,"sources":["/home/niels/dev/nielsrowinbik/brewtime/hooks/use-timer.ts"],"names":["useState","useMemo","useInterval","useTimer","userSteps","steps","map","step","i","duration","start","slice","reduce","total","length","totalTime","elapsed","setElapsed","isRunning","setIsRunning","remaining","isComplete","currentStepIndex","findIndex","tick","pause","reset","toggle"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAA8BC,OAA9B,QAA6C,OAA7C;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAOA,OAAO,MAAMC,QAAQ,GAAIC,SAAD,IAAuB;AAC3C;AACA,QAAMC,KAAK,GAAGJ,OAAO,CACjB,MACIG,SAAS,CAACE,GAAV,CAAc,CAACC,IAAD,EAAOC,CAAP,qCACPD,IADO;AAEVE,IAAAA,QAAQ,EAAEF,IAAI,CAACE,QAAL,GAAgB,IAFhB;AAGVC,IAAAA,KAAK,EAAEN,SAAS,CACXO,KADE,CACI,CADJ,EACOH,CADP,EAEFI,MAFE,CAGC,CAACC,KAAD,EAAQ;AAAEJ,MAAAA;AAAF,KAAR,KAAyBI,KAAK,GAAGJ,QAAQ,GAAG,IAH7C,EAIC,CAJD;AAHG,IAAd,CAFa,EAYjB,CAACL,SAAS,CAACU,MAAX,CAZiB,CAArB;AAcA,QAAMC,SAAS,GAAGd,OAAO,CACrB,MACIG,SAAS,CAACQ,MAAV,CACI,CAACC,KAAD,EAAQ;AAAEJ,IAAAA;AAAF,GAAR,KAAyBI,KAAK,GAAGJ,QAAQ,GAAG,IADhD,EAEI,CAFJ,CAFiB,EAMrB,CAACL,SAAS,CAACU,MAAX,CANqB,CAAzB;AAQA,QAAM;AAAA,OAACE,OAAD;AAAA,OAAUC;AAAV,MAAwBjB,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM;AAAA,OAACkB,SAAD;AAAA,OAAYC;AAAZ,MAA4BnB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMoB,SAAS,GAAGnB,OAAO,CAAC,MAAMc,SAAS,GAAGC,OAAnB,EAA4B,CAACA,OAAD,CAA5B,CAAzB;AACA,QAAMK,UAAU,GAAGpB,OAAO,CAAC,MAAMmB,SAAS,KAAK,CAArB,EAAwB,CAACA,SAAD,CAAxB,CAA1B;AACA,QAAME,gBAAgB,GAAGrB,OAAO,CAC5B,MAAMI,KAAK,CAACkB,SAAN,CAAgB,CAAC;AAAEb,IAAAA;AAAF,GAAD,KAAeM,OAAO,GAAGN,KAAzC,IAAkD,CAD5B,EAE5B,CAACM,OAAD,CAF4B,CAAhC,CA5B2C,CAiC3C;;AACA,QAAMQ,IAAI,GAAG,MAAMP,UAAU,CAAED,OAAD,IAAcA,OAAO,IAAI,GAA1B,CAA7B;;AACAd,EAAAA,WAAW,CAACsB,IAAD,EAAON,SAAS,IAAI,CAACG,UAAd,GAA2B,GAA3B,GAAiC,IAAxC,CAAX,CAnC2C,CAqC3C;;AACA,QAAMI,KAAK,GAAG,MAAMN,YAAY,CAAC,KAAD,CAAhC;;AACA,QAAMO,KAAK,GAAG,MAAM;AAChBT,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAIA,QAAMT,KAAK,GAAG,MAAMS,YAAY,CAAC,IAAD,CAAhC;;AACA,QAAMQ,MAAM,GAAG,MAAMR,YAAY,CAAED,SAAD,IAAe,CAACA,SAAjB,CAAjC;;AAEA,SAAO;AACHI,IAAAA,gBADG;AAEHN,IAAAA,OAFG;AAGHK,IAAAA,UAHG;AAIHH,IAAAA,SAJG;AAKHO,IAAAA,KALG;AAMHL,IAAAA,SANG;AAOHM,IAAAA,KAPG;AAQHhB,IAAAA,KARG;AASHiB,IAAAA;AATG,GAAP;AAWH,CAzDM","sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\n\nimport { useInterval } from \"./use-interval\";\n\ntype Step = {\n    description: string;\n    duration: number;\n};\n\nexport const useTimer = (userSteps: Step[]) => {\n    // Initialize timer:\n    const steps = useMemo(\n        () =>\n            userSteps.map((step, i) => ({\n                ...step,\n                duration: step.duration * 1000,\n                start: userSteps\n                    .slice(0, i)\n                    .reduce(\n                        (total, { duration }) => total + duration * 1000,\n                        0\n                    ),\n            })),\n        [userSteps.length]\n    );\n    const totalTime = useMemo(\n        () =>\n            userSteps.reduce(\n                (total, { duration }) => total + duration * 1000,\n                0\n            ),\n        [userSteps.length]\n    );\n    const [elapsed, setElapsed] = useState(0);\n    const [isRunning, setIsRunning] = useState(false);\n    const remaining = useMemo(() => totalTime - elapsed, [elapsed]);\n    const isComplete = useMemo(() => remaining === 0, [remaining]);\n    const currentStepIndex = useMemo(\n        () => steps.findIndex(({ start }) => elapsed < start) - 1,\n        [elapsed]\n    );\n\n    // Run the timer:\n    const tick = () => setElapsed((elapsed) => (elapsed += 100));\n    useInterval(tick, isRunning && !isComplete ? 100 : null);\n\n    // Manipulate the timer:\n    const pause = () => setIsRunning(false);\n    const reset = () => {\n        setElapsed(0);\n        setIsRunning(false);\n    };\n    const start = () => setIsRunning(true);\n    const toggle = () => setIsRunning((isRunning) => !isRunning);\n\n    return {\n        currentStepIndex,\n        elapsed,\n        isComplete,\n        isRunning,\n        pause,\n        remaining,\n        reset,\n        start,\n        toggle,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}