{"ast":null,"code":"export const parseMillisecondsIntoTimeStamp = (milliseconds, includeHours = false) => {\n  //Get hours from milliseconds\n  const hours = milliseconds / (1000 * 60 * 60);\n  const absoluteHours = Math.round(hours);\n  const hourString = absoluteHours > 9 ? absoluteHours : `0${absoluteHours}`; //Get remainder from hours and convert to minutes\n\n  const minutes = (hours - absoluteHours) * 60;\n  const absoluteMinutes = Math.round(minutes);\n  const minuteString = absoluteMinutes > 9 ? absoluteMinutes : `0${absoluteMinutes}`; //Get remainder from minutes and convert to seconds\n\n  const seconds = (minutes - absoluteMinutes) * 60;\n  const absoluteSeconds = Math.round(seconds);\n  const secondString = absoluteSeconds > 9 ? absoluteSeconds : `0${absoluteSeconds}`;\n  return [hourString, minuteString, secondString].slice(includeHours ? 0 : 1, 3).join(\":\");\n};","map":{"version":3,"sources":["/home/niels/dev/nielsrowinbik/brewtime/utils/parser.ts"],"names":["parseMillisecondsIntoTimeStamp","milliseconds","includeHours","hours","absoluteHours","Math","round","hourString","minutes","absoluteMinutes","minuteString","seconds","absoluteSeconds","secondString","slice","join"],"mappings":"AAAA,OAAO,MAAMA,8BAA8B,GAAG,CAC1CC,YAD0C,EAE1CC,YAAY,GAAG,KAF2B,KAGzC;AACD;AACA,QAAMC,KAAK,GAAGF,YAAY,IAAI,OAAO,EAAP,GAAY,EAAhB,CAA1B;AACA,QAAMG,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAX,CAAtB;AACA,QAAMI,UAAU,GAAGH,aAAa,GAAG,CAAhB,GAAoBA,aAApB,GAAqC,IAAGA,aAAc,EAAzE,CAJC,CAMD;;AACA,QAAMI,OAAO,GAAG,CAACL,KAAK,GAAGC,aAAT,IAA0B,EAA1C;AACA,QAAMK,eAAe,GAAGJ,IAAI,CAACC,KAAL,CAAWE,OAAX,CAAxB;AACA,QAAME,YAAY,GACdD,eAAe,GAAG,CAAlB,GAAsBA,eAAtB,GAAyC,IAAGA,eAAgB,EADhE,CATC,CAYD;;AACA,QAAME,OAAO,GAAG,CAACH,OAAO,GAAGC,eAAX,IAA8B,EAA9C;AACA,QAAMG,eAAe,GAAGP,IAAI,CAACC,KAAL,CAAWK,OAAX,CAAxB;AACA,QAAME,YAAY,GACdD,eAAe,GAAG,CAAlB,GAAsBA,eAAtB,GAAyC,IAAGA,eAAgB,EADhE;AAGA,SAAO,CAACL,UAAD,EAAaG,YAAb,EAA2BG,YAA3B,EACFC,KADE,CACIZ,YAAY,GAAG,CAAH,GAAO,CADvB,EAC0B,CAD1B,EAEFa,IAFE,CAEG,GAFH,CAAP;AAGH,CAxBM","sourcesContent":["export const parseMillisecondsIntoTimeStamp = (\n    milliseconds: number,\n    includeHours = false\n) => {\n    //Get hours from milliseconds\n    const hours = milliseconds / (1000 * 60 * 60);\n    const absoluteHours = Math.round(hours);\n    const hourString = absoluteHours > 9 ? absoluteHours : `0${absoluteHours}`;\n\n    //Get remainder from hours and convert to minutes\n    const minutes = (hours - absoluteHours) * 60;\n    const absoluteMinutes = Math.round(minutes);\n    const minuteString =\n        absoluteMinutes > 9 ? absoluteMinutes : `0${absoluteMinutes}`;\n\n    //Get remainder from minutes and convert to seconds\n    const seconds = (minutes - absoluteMinutes) * 60;\n    const absoluteSeconds = Math.round(seconds);\n    const secondString =\n        absoluteSeconds > 9 ? absoluteSeconds : `0${absoluteSeconds}`;\n\n    return [hourString, minuteString, secondString]\n        .slice(includeHours ? 0 : 1, 3)\n        .join(\":\");\n};\n"]},"metadata":{},"sourceType":"module"}