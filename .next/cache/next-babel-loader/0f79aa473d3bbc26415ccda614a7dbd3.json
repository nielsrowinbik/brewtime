{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useMemo } from \"react\";\nimport { useInterval } from \"./use-interval\";\nexport var useTimer = function useTimer(options) {\n  _s();\n\n  var steps = options.steps; // Initialize timer:\n\n  var totalTime = useMemo(function () {\n    return steps.reduce(function (total, step) {\n      return total + step.duration * 1000;\n    }, 0);\n  }, [steps.length]);\n\n  var _useState = useState(0),\n      elapsed = _useState[0],\n      setElapsed = _useState[1];\n\n  var _useState2 = useState(false),\n      isComplete = _useState2[0],\n      setIsComplete = _useState2[1];\n\n  var _useState3 = useState(false),\n      isRunning = _useState3[0],\n      setIsRunning = _useState3[1];\n\n  var _useState4 = useState(totalTime),\n      remaining = _useState4[0],\n      setRemaining = _useState4[1]; // Run the timer:\n\n\n  var tick = function tick() {\n    return setElapsed(function (elapsed) {\n      return elapsed += 100;\n    });\n  };\n\n  useInterval(tick, isRunning && !isComplete ? 100 : null); // Update the remaining time:\n\n  useEffect(function () {\n    remaining > 0 && setRemaining(totalTime - elapsed);\n  }, [elapsed]); // Determine if the timer is complete:\n\n  useEffect(function () {\n    if (remaining === 0) {\n      setIsComplete(true);\n      setIsRunning(false);\n    }\n  }, [remaining]); // Manipulate the timer:\n\n  var pause = function pause() {\n    return setIsRunning(false);\n  };\n\n  var reset = function reset() {\n    setElapsed(0);\n    setIsRunning(false);\n    setIsComplete(false);\n    setRemaining(totalTime);\n  };\n\n  var start = function start() {\n    return setIsRunning(true);\n  };\n\n  var toggle = function toggle() {\n    return setIsRunning(function (isRunning) {\n      return !isRunning;\n    });\n  };\n\n  return {\n    elapsed: elapsed,\n    isComplete: isComplete,\n    isRunning: isRunning,\n    pause: pause,\n    remaining: remaining,\n    reset: reset,\n    start: start,\n    toggle: toggle\n  };\n};\n\n_s(useTimer, \"PMFHG52yMPBBRSwzOREfT/HfBQI=\", false, function () {\n  return [useInterval];\n});","map":{"version":3,"sources":["/home/niels/dev/nielsrowinbik/brewtime/hooks/use-timer.ts"],"names":["useState","useEffect","useMemo","useInterval","useTimer","options","steps","totalTime","reduce","total","step","duration","length","elapsed","setElapsed","isComplete","setIsComplete","isRunning","setIsRunning","remaining","setRemaining","tick","pause","reset","start","toggle"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,OAA9B,QAA6C,OAA7C;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AAWA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,OAAD,EAAsB;AAAA;;AAAA,MAClCC,KADkC,GACxBD,OADwB,CAClCC,KADkC,EAG1C;;AACA,MAAMC,SAAS,GAAGL,OAAO,CACrB;AAAA,WAAMI,KAAK,CAACE,MAAN,CAAa,UAACC,KAAD,EAAQC,IAAR;AAAA,aAAiBD,KAAK,GAAGC,IAAI,CAACC,QAAL,GAAgB,IAAzC;AAAA,KAAb,EAA4D,CAA5D,CAAN;AAAA,GADqB,EAErB,CAACL,KAAK,CAACM,MAAP,CAFqB,CAAzB;;AAJ0C,kBAQZZ,QAAQ,CAAC,CAAD,CARI;AAAA,MAQnCa,OARmC;AAAA,MAQ1BC,UAR0B;;AAAA,mBASNd,QAAQ,CAAC,KAAD,CATF;AAAA,MASnCe,UATmC;AAAA,MASvBC,aATuB;;AAAA,mBAURhB,QAAQ,CAAC,KAAD,CAVA;AAAA,MAUnCiB,SAVmC;AAAA,MAUxBC,YAVwB;;AAAA,mBAWRlB,QAAQ,CAACO,SAAD,CAXA;AAAA,MAWnCY,SAXmC;AAAA,MAWxBC,YAXwB,kBAa1C;;;AACA,MAAMC,IAAI,GAAG,SAAPA,IAAO;AAAA,WAAMP,UAAU,CAAC,UAACD,OAAD;AAAA,aAAcA,OAAO,IAAI,GAAzB;AAAA,KAAD,CAAhB;AAAA,GAAb;;AACAV,EAAAA,WAAW,CAACkB,IAAD,EAAOJ,SAAS,IAAI,CAACF,UAAd,GAA2B,GAA3B,GAAiC,IAAxC,CAAX,CAf0C,CAiB1C;;AACAd,EAAAA,SAAS,CAAC,YAAM;AACZkB,IAAAA,SAAS,GAAG,CAAZ,IAAiBC,YAAY,CAACb,SAAS,GAAGM,OAAb,CAA7B;AACH,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT,CAlB0C,CAsB1C;;AACAZ,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIkB,SAAS,KAAK,CAAlB,EAAqB;AACjBH,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GALQ,EAKN,CAACC,SAAD,CALM,CAAT,CAvB0C,CA8B1C;;AACA,MAAMG,KAAK,GAAG,SAARA,KAAQ;AAAA,WAAMJ,YAAY,CAAC,KAAD,CAAlB;AAAA,GAAd;;AACA,MAAMK,KAAK,GAAG,SAARA,KAAQ,GAAM;AAChBT,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAI,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,IAAAA,YAAY,CAACb,SAAD,CAAZ;AACH,GALD;;AAMA,MAAMiB,KAAK,GAAG,SAARA,KAAQ;AAAA,WAAMN,YAAY,CAAC,IAAD,CAAlB;AAAA,GAAd;;AACA,MAAMO,MAAM,GAAG,SAATA,MAAS;AAAA,WAAMP,YAAY,CAAC,UAACD,SAAD;AAAA,aAAe,CAACA,SAAhB;AAAA,KAAD,CAAlB;AAAA,GAAf;;AAEA,SAAO;AACHJ,IAAAA,OAAO,EAAPA,OADG;AAEHE,IAAAA,UAAU,EAAVA,UAFG;AAGHE,IAAAA,SAAS,EAATA,SAHG;AAIHK,IAAAA,KAAK,EAALA,KAJG;AAKHH,IAAAA,SAAS,EAATA,SALG;AAMHI,IAAAA,KAAK,EAALA,KANG;AAOHC,IAAAA,KAAK,EAALA,KAPG;AAQHC,IAAAA,MAAM,EAANA;AARG,GAAP;AAUH,CAnDM;;GAAMrB,Q;UAeTD,W","sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\n\nimport { useInterval } from \"./use-interval\";\n\ntype Step = {\n    description: string;\n    duration: number;\n};\n\ntype Options = {\n    steps: Step[];\n};\n\nexport const useTimer = (options: Options) => {\n    const { steps } = options;\n\n    // Initialize timer:\n    const totalTime = useMemo(\n        () => steps.reduce((total, step) => total + step.duration * 1000, 0),\n        [steps.length]\n    );\n    const [elapsed, setElapsed] = useState(0);\n    const [isComplete, setIsComplete] = useState(false);\n    const [isRunning, setIsRunning] = useState(false);\n    const [remaining, setRemaining] = useState(totalTime);\n\n    // Run the timer:\n    const tick = () => setElapsed((elapsed) => (elapsed += 100));\n    useInterval(tick, isRunning && !isComplete ? 100 : null);\n\n    // Update the remaining time:\n    useEffect(() => {\n        remaining > 0 && setRemaining(totalTime - elapsed);\n    }, [elapsed]);\n\n    // Determine if the timer is complete:\n    useEffect(() => {\n        if (remaining === 0) {\n            setIsComplete(true);\n            setIsRunning(false);\n        }\n    }, [remaining]);\n\n    // Manipulate the timer:\n    const pause = () => setIsRunning(false);\n    const reset = () => {\n        setElapsed(0);\n        setIsRunning(false);\n        setIsComplete(false);\n        setRemaining(totalTime);\n    };\n    const start = () => setIsRunning(true);\n    const toggle = () => setIsRunning((isRunning) => !isRunning);\n\n    return {\n        elapsed,\n        isComplete,\n        isRunning,\n        pause,\n        remaining,\n        reset,\n        start,\n        toggle,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}