{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useMemo } from \"react\";\nimport { useInterval } from \"./use-interval\";\nexport var useTimer = function useTimer(userSteps) {\n  _s();\n\n  // Add a \"start\" field to every step that was passed in so we\n  // can determine which step is the current:\n  var steps = useMemo(function () {\n    return userSteps.map(function (step, i) {\n      return _objectSpread(_objectSpread({}, step), {}, {\n        // We convert step duration, which is configured in seconds,\n        // to milliseconds here. This overwrites the original duration\n        // value!\n        duration: step.duration * 1000,\n        // The start is determined by the sum of all durations of\n        // the previous steps. Once these durations have passed,\n        // the current step is active.\n        start: userSteps.slice(0, i).reduce(function (total, _ref) {\n          var duration = _ref.duration;\n          return total + duration * 1000;\n        }, 0)\n      });\n    });\n  }, [userSteps.length]);\n  var totalTime = useMemo(function () {\n    return userSteps.reduce(function (total, _ref2) {\n      var duration = _ref2.duration;\n      return total + duration * 1000;\n    }, 0);\n  }, [userSteps.length]);\n\n  var _useState = useState(0),\n      elapsed = _useState[0],\n      setElapsed = _useState[1];\n\n  var _useState2 = useState(false),\n      isRunning = _useState2[0],\n      setIsRunning = _useState2[1];\n\n  var remaining = useMemo(function () {\n    return totalTime - elapsed;\n  }, [elapsed]);\n  var isComplete = useMemo(function () {\n    return remaining === 0;\n  }, [remaining]);\n  var currentStepIndex = useMemo(function () {\n    return steps.findIndex(function (_ref3) {\n      var start = _ref3.start;\n      return elapsed < start;\n    }) - 1;\n  }, [elapsed]); // Run the timer:\n\n  var tick = function tick() {\n    return setElapsed(function (elapsed) {\n      return elapsed += 100;\n    });\n  };\n\n  useInterval(tick, isRunning && !isComplete ? 100 : null); // Manipulate the timer:\n\n  var pause = function pause() {\n    return setIsRunning(false);\n  };\n\n  var reset = function reset() {\n    setElapsed(0);\n    setIsRunning(false);\n  };\n\n  var start = function start() {\n    return setIsRunning(true);\n  };\n\n  var toggle = function toggle() {\n    return setIsRunning(function (isRunning) {\n      return !isRunning;\n    });\n  };\n\n  return {\n    currentStepIndex: currentStepIndex,\n    elapsed: elapsed,\n    isComplete: isComplete,\n    isRunning: isRunning,\n    pause: pause,\n    remaining: remaining,\n    reset: reset,\n    start: start,\n    toggle: toggle\n  };\n};\n\n_s(useTimer, \"4/0OvYoo8HkjN0cdmzb90GqlB08=\", false, function () {\n  return [useInterval];\n});","map":{"version":3,"sources":["/home/niels/dev/nielsrowinbik/brewtime/hooks/use-timer.ts"],"names":["useState","useMemo","useInterval","useTimer","userSteps","steps","map","step","i","duration","start","slice","reduce","total","length","totalTime","elapsed","setElapsed","isRunning","setIsRunning","remaining","isComplete","currentStepIndex","findIndex","tick","pause","reset","toggle"],"mappings":"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","sourcesContent":["import { useState, useEffect, useMemo } from \"react\";\n\nimport { useInterval } from \"./use-interval\";\n\ntype Step = {\n    description: string;\n    duration: number;\n};\n\nexport const useTimer = (userSteps: Step[]) => {\n    // Add a \"start\" field to every step that was passed in so we\n    // can determine which step is the current:\n    const steps = useMemo(\n        () =>\n            userSteps.map((step, i) => ({\n                // We copy the original step as not to lose any nformation.\n                ...step,\n\n                // We convert step duration, which is configured in seconds,\n                // to milliseconds here. This overwrites the original duration\n                // value!\n                duration: step.duration * 1000,\n\n                // The start is determined by the sum of all durations of\n                // the previous steps. Once these durations have passed,\n                // the current step is active.\n                start: userSteps\n                    .slice(0, i)\n                    .reduce(\n                        (total, { duration }) => total + duration * 1000,\n                        0\n                    ),\n            })),\n        [userSteps.length]\n    );\n    const totalTime = useMemo(\n        () =>\n            userSteps.reduce(\n                (total, { duration }) => total + duration * 1000,\n                0\n            ),\n        [userSteps.length]\n    );\n    const [elapsed, setElapsed] = useState(0);\n    const [isRunning, setIsRunning] = useState(false);\n    const remaining = useMemo(() => totalTime - elapsed, [elapsed]);\n    const isComplete = useMemo(() => remaining === 0, [remaining]);\n    const currentStepIndex = useMemo(\n        () => steps.findIndex(({ start }) => elapsed < start) - 1,\n        [elapsed]\n    );\n\n    // Run the timer:\n    const tick = () => setElapsed((elapsed) => (elapsed += 100));\n    useInterval(tick, isRunning && !isComplete ? 100 : null);\n\n    // Manipulate the timer:\n    const pause = () => setIsRunning(false);\n    const reset = () => {\n        setElapsed(0);\n        setIsRunning(false);\n    };\n    const start = () => setIsRunning(true);\n    const toggle = () => setIsRunning((isRunning) => !isRunning);\n\n    return {\n        currentStepIndex,\n        elapsed,\n        isComplete,\n        isRunning,\n        pause,\n        remaining,\n        reset,\n        start,\n        toggle,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}